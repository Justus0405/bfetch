#!/usr/bin/env bash
#
# Yet another fetch script in bash
#
# Author: Justus0405
# Date: 11.07.2024
# License: MIT

# Color Variables
black="\e[30m"
red="\e[31m"
green="\e[32m"
yellow="\e[33m"
blue="\e[34m"
magenta="\e[35m"
cyan="\e[36m"
white="\e[97m"
endColor="\e[0m"

#########################
# Input Handling
#########################
checkArgs() {
	case $1 in
	"-s" | "--system")
		system
		;;
	"-t" | "--temps")
		temps
		;;
	"-h" | "--help")
		showHelp
		;;
	"")
		system
		;;
	*)
		echo -e "Error: unrecognized option '$1'. Use $0 -h or --help"
		exit 1
		;;
	esac
}

#########################
# Fetch Stuff
#########################
system() {

	#########################
	# Operating System Info
	#########################

	showUser=$(whoami)
	showHostname=$(cat /etc/hostname)
	showKernel=$(uname -r)
	showUptime=$(uptime -p | sed 's/up //')
	# Reads the age of the file machine-id to determine the OS age
	if [[ -f "/etc/machine-id" ]]; then
		showAge=$((($(date +%s) - $(date -r "/etc/machine-id" +%s)) / 86400))
	else
		showAge="Error: File not found"
	fi

	#########################
	# Usage Info
	#########################

	# Show ram usage in mb, cut everything except line 2, calculate used percentage
	showRamUsage=$(free -m | awk 'NR==2{used=$3; total=$2; printf "%dmb / %dmb (%.0f%%)", used, total, used/total*100}')

	# Show total disk usage in gb, only use line total , print values
	showDiskUsage=$(df -h --total | awk '/total/ {printf "%s / %s (%s)", $3, $2, $5}')

	#########################
	# Network Info
	#########################

	# Tries to ping google dns server, if successful return Online, if not return Offline
	showOnlineStatus=$(if ping -c 1 8.8.8.8 &>/dev/null; then echo -e "${green}Online${endColor}"; else echo -e "${red}Offline${endColor}"; fi)

	# Show every IPv4 adress, filter only for the numbers, remove loopback adress, show remaining adress
	showLocalIp=$(ip -4 addr show | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | grep -v '127.0.0.1' | head -n 1)

	#########################
	# System Info Start
	#########################

	echo -e ""
	echo -e "\t╭─────────────╮"
	echo -e "\t│ 󰀄  ${red}User${endColor}     │ ${showUser}"
	echo -e "\t│ 󰌽  ${yellow}Kernel${endColor}   │ ${showKernel}"
	echo -e "\t│ 󰥔  ${green}Uptime${endColor}   │ ${showUptime}"
	echo -e "\t│ 󰃭  ${cyan}Age${endColor}      │ ${showAge} days"
	echo -e "\t│ 󰘚  ${blue}Ram${endColor}      │ ${showRamUsage}"
	echo -e "\t│ 󰋊  ${magenta}Disk${endColor}     │ ${showDiskUsage}"
	echo -e "\t├─────────────┤"
	echo -e "\t│ 󱄙  ${red}Hostname${endColor} │ ${showHostname}"
	echo -e "\t│ 󰖩  ${yellow}Internet${endColor} │ ${showOnlineStatus}"
	echo -e "\t│ 󰈀  ${green}Local IP${endColor} │ ${showLocalIp}"
	echo -e "\t├─────────────┤"
	echo -e "\t│ 󰏘  colors   │ ${white} ${red} ${yellow} ${green} ${cyan} ${blue} ${magenta} ${black} ${endColor}"
	echo -e "\t╰─────────────╯"
	echo -e ""
}

#########################
# Temperature Stuff
#########################

# Function to find temperature file paths
findTempPath() {
	local potentialPaths=("$@")
	for path in "${potentialPaths[@]}"; do
		if [ -f "$path" ] && [ -s "$path" ]; then
			echo "$path"
			return 0
		fi
	done
	echo ""
}

temps() {
	echo -e ""
	echo -e "\t> Temperatures"
	potentialPathsZone0=(
		"/sys/class/thermal/thermal_zone0/temp"
		"/sys/class/hwmon/hwmon0/temp1_input"
		"/sys/class/hwmon/hwmon1/temp1_input"
	)
	potentialPathsZone1=(
		"/sys/class/thermal/thermal_zone1/temp"
		"/sys/class/hwmon/hwmon0/temp2_input"
		"/sys/class/hwmon/hwmon1/temp2_input"
	)

	thermalZone0Path=$(findTempPath "${potentialPathsZone0[@]}")
	thermalZone1Path=$(findTempPath "${potentialPathsZone1[@]}")

	if [[ -n "${thermalZone0Path}" ]]; then
		temp0=$(cat "${thermalZone0Path}" 2>/dev/null)
		if [[ ${temp0} =~ ^[0-9]+$ ]]; then
			thermalZone0=$(cat /sys/class/thermal/thermal_zone0/type 2>/dev/null || echo "Zone 0")
			thermalZone0Temp=$((temp0 / 1000))
			echo -e "\t${red}${thermalZone0}${endColor}: ${cyan}${thermalZone0Temp}°C${endColor}"
		fi
	fi

	if [[ -n "${thermalZone1Path}" ]]; then
		temp1=$(cat "${thermalZone1Path}" 2>/dev/null)
		if [[ ${temp1} =~ ^[0-9]+$ ]]; then
			thermalZone1=$(cat /sys/class/thermal/thermal_zone1/type 2>/dev/null || echo "Zone 1")
			thermalZone1Temp=$((temp1 / 1000))
			echo -e "\t${red}${thermalZone1}${endColor}: ${cyan}${thermalZone1Temp}°C${endColor}"
		fi
	fi

	if [[ -z "${thermalZone0Path}" ]] && [[ -z "${thermalZone1Path}" ]]; then
		echo -e "\t${red}Error:${endColor} No valid temperature sensor found"
		exit 1
	fi

	echo -e ""
}

showHelp() {
	echo -e "usage: $0 [...]"
	echo -e "arguments:"
	echo -e "    -s | --system"
	echo -e "    -t | --temps"
	echo -e "    -h | --help"
	echo -e ""
	exit 0
}

#########################
# Program Start
#########################

checkArgs "$@"
